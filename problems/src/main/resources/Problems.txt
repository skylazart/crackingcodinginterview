Prob1:
Example: Given a smaller strings and a bigger string b, design an algorithm to find all permutations of the shorter
string within the longer one. Print the location of each permutation.

Prob2:
Is Unique: Implement an algorithm to determine if a string has all unique characters.
What if you cannot use additional data structures?

Prob3:
Check Permutation: Given two strings,write a method to decide if one is a permutation of the other.

Prob4:
One Away: There are three types of edits that can be performed on strings: insert a character, remove a character,
or replace a character. Given two strings, write a function to check if they are one edit (or zero edits) away.

EXAMPLE
pale, ple -> true
pales, pale -> true
pale,bale -> true
pale, bake -> false

Prob5:
Palindrome Permutation: Given a string, write a function to check if it is a permutation of a palindrome.
A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters.
The palindrome does not need to be limited to just dictionary words.
EXAMPLE
Input: Tact Coa
Output: True (permutations: "taco cat", "atco eta", etc.)

Prob6:
String Compression: Implement a method to perform basic string compression using the counts of repeated characters.
For example, the string aabcccccaaa would become a2blc5a3. If the "compressed" string would not become smaller than
the original string, your method should return the original string. You can assume the string has only uppercase and
lowercase letters (a - z).

Prob7:
Rotate Matrix: Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to
rotate the image by 90 degrees. Can you do this in place?

Prob8:
Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.

Prob9:
String Rotation: Assume you have a method isSubstring which checks if one word is a substring of another.
Given two strings, sl and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring
(e.g.,"waterbottle" is a rotation of "erbottlewat").

Prob10:
Remove Dups! Write code to remove duplicates from an unsorted linked list.
FOLLOW UP
How would you solve this problem if a temporary buffer is not allowed?

Prob11:
Return Kth to Last: Implement an algorithm to  nd the kth to last element of a singly linked list.

Prob12:
Delete Middle Node: Implement an algorithm to delete a node in the middle (i.e., any node but the first and last node,
not necessarily the exact middle) of a singly linked list, given only access to that node.
EXAMPLE
Input:the node c from the linked list a->b->c->d->e->f
Result: nothing is returned, but the new linked list looks like a->b->d->e->f

Prob13:
Partition: Write code to partition a linked list around a value x, such that all nodes less than x come before all
nodes greater than or equal to x. If x is contained within the list, the values of x only need to be after the elements
less than x (see below). The partition element x can appear anywhere in the "right partition"; it does not need to
appear between the left and right partitions.
EXAMPLE
Input: 3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1[partition=5]
Output: 3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8

Prob14:
Sum Lists: You have two numbers represented by a linked list, where each node contains a single digit.The digits are
stored in reverse order, such that the 1 's digit is at the head of the list. Write a function that adds the two numbers
and returns the sum as a linked list.
EXAMPLE
Input:(7-> 1 -> 6) + (5 -> 9 -> 2). That is, 617 + 295. Output: 2 -> 1 -> 9. That is,912.

Prob15:
FOLLOW UP
Suppose the digits are stored in forward order. Repeat the above problem.
EXAMPLE
Input:(6 -> 1 -> 7) + (2 -> 9 -> 5). That is, 617 + 295.
Output:9 -> 1 -> 2. That is, 912.

Prob16:
Palindrome: Implement a function to check if a linked list is a palindrome.

Prob17:
Intersection: Given two (singly) linked lists, determine if the two lists intersect. Return the inter­ secting node.
Note that the intersection is de ned based on reference, not value.That is, if the kth node of the  rst linked list is
the exact same node (by reference) as the jth node of the second linked list, then they are intersecting.

Prob18:
Loop Detection: Given a circular linked list, implement an algorithm that returns the node at the
beginning of the loop.

DEFINITION
Circular linked list: A (corrupt) linked list in which a node's next pointer points to an earlier node, so as to make
a loop in the linked list.
EXAMPLE
Input: A -> B -> C -> D -> E -> C [the same C as earlier]
Output: C

Prob19:
Stack Min: How would you design a stack which, in addition to push and pop, has a function min which returns the minimum
element? Push, pop and min should all operate in 0(1) time.

Prob20:
Stack of Plates: Imagine a (literal) stack of plates. If the stack gets too high, it might topple.
composed of several stacks and should create a new stack once the previous one exceeds capacity.
SetOfStacks.push() and SetOfStacks.pop() should behave identically to a single stack
(that is, pop() should return the same values as it would if there were just a single stack).
FOLLOW UP
Implement a function popAt(int index) which performs a pop operation on a specific sub-stack.

Prob21:
Sort Stack: Write a program to sort a stack such that the smallest items are on the top. You can use an additional
temporary stack, but you may not copy the elements into any other data structure (such as an array).
The stack supports the following operations: push, pop, peek, and isEmpty.

Prob22:
Transform a Binary Search Tree in a Doubly linked list. In order.

Prob23:
Route Between Nodes: Given a directed graph, design an algorithm to  nd out whether there is a route between two nodes.

Prob24:
Minimal Tree: Given a sorted (increasing order) array with unique integer elements, write an algorithm to create a
binary search tree with minimal height.

Prob25:
List of Depths: Given a binary tree, design an algorithm which creates a linked list of all the nodes
at each depth (e.g., if you have a tree with depth D, you'll have D linked lists).

Prob26:
Check if a BST is balanced

Prob27:
Check if a tree is a BST

Prob28:
Check Subtree: Tl and T2 are two very large binary trees, with Tl much bigger than T2. Create an
algorithm to determine if T2 is a subtree of Tl.
A tree T2 is a subtree of Tl if there exists a node n in Tl such that the subtree of n is identical to T2.
That is, if you cut off the tree at node n, the two trees would be identical.

Prob29:
Merge two sorted linked lists

Prob30:
Merge two sorted arrays

Prob31:
Binary search in a shifted array

Prob32:
Print each node within a binary tree only when the sum of right nodes are greater then the sum of left nodes

Prob33:
Paths with Sum: You are given a binary tree in which each node contains an integer value
(which might be positive or negative). Design an algorithm to count the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go downwards
(traveling only from parent nodes to child nodes).

Prob34:
Given an array, how would you find all contiguous subsequences with a particular sum?
Again, think about the duplicated work in the brute-force algorithm.

Prob35:
Find the left and right most in a BST

Prob36:
Find sum of n elements after kth smallest element in BST. Tree is very large, you are not allowed to traverse the tree.

Prob37:
Given an array of numbers. Print all the pairs (2) of numbers in the array if the sum of those numbers is also present
in the array.

Prob38:
Build Order: You are given a list of projects and a list of dependencies (which is a list of pairs of projects,
where the second project is dependent on the  rst project). All of a project's dependencies must be built before the
project is. Find a build order that will allow the projects to be built.
If there is no valid build order, return an error.
EXAMPLE
Input:
projects: a, b, c, d, e, f
dependencies: (a, d), (f, b), (b, d), (f, a), (d, c) Output: f, e, a, b, d, c

Prob39:
Given an array of integers and the integer n, return the indices of the first two integers in the array that sum to n.

Prob40:
Given a singly linked list: 1->2->3->4->5
Change it to 1->5->2->4->3 using O(1) space

Prob41:
Keep max top numbers from a stream

Prob42:
With the best time complexity, please come up with a code to find the minimum delta of two elements from two different
arrays of integers of different sizes - a[-3, 1, 999], b[-1, 2, 3]

Prob44:
Insert into a sorted Linked list

Prob45:
Delete a given node from a list using the following method:
void delete(head, toBeDeleted);

Prob46:
Compare two string represented by a linked list
Example:
Input: list1 = g->e->e->k->s->a
       list2 = g->e->e->k->s->b
Output: -1

Input: list1 = g->e->e->k->s->a
       list2 = g->e->e->k->s
Output: 1

Input: list1 = g->e->e->k->s
       list2 = g->e->e->k->s
Output: 0

Prob48:
Bubble sort

Prob49:
Insertion sort

Prob50:
Merge a linked list into another linked list at alternate positions

Prob51:
Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from
root node down to the nearest leaf node.

Prob52:
Maximum Path Sum in a Binary Tree

Prob53:
Check if a given array can represent Preorder Traversal of Binary Search Tree

Prob54:
Check whether a binary tree is a full binary tree or not

Prob55:
Lowest Common Ancestor in a Binary Search Tree.

Prob56:
Check if a binary tree is subtree of another binary tree | Set 2

Prob57:
Remove nodes on root to leaf paths of length < K

Prob58:
Select a Random Node from a Singly Linked List

Prob59:
K’th Smallest/Largest Element in Unsorted Array | Set 1

Prob61:
Given a sum K and a data set of integers, find me 2 numbers which add up to the the sum

Prob62:
Given a sorted array and a number x, find the pair in array whose sum is closest to x

TODO:
Prob60:
K’th Smallest/Largest Element in Unsorted Array | Set 2 (Expected Linear Time)

Prob43:
We have a bag containing numbers 1, 2, 3, …, 100. Each number appears exactly once, so there are 100 numbers.
Now one number is randomly picked out of the bag. Find the missing number.
Now how would you do this if TWO numbers are missing?

Prob47:
Reverse a Linked List in groups of given size
Example:
Inputs:  1->2->3->4->5->6->7->8->NULL and k = 3
Output:  3->2->1->6->5->4->8->7->NULL.

Inputs:   1->2->3->4->5->6->7->8->NULL and k = 5
Output:  5->4->3->2->1->8->7->6->NULL.



