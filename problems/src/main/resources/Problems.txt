1:
Example: Given a smaller strings and a bigger string b, design an algorithm to find all permutations of the shorter
string within the longer one. Print the location of each permutation.

2:
Is Unique: Implement an algorithm to determine if a string has all unique characters.
What if you cannot use additional data structures?

3:
Check Permutation: Given two strings,write a method to decide if one is a permutation of the other.

4:
One Away: There are three types of edits that can be performed on strings: insert a character, remove a character,
or replace a character. Given two strings, write a function to check if they are one edit (or zero edits) away.

EXAMPLE
pale, ple -> true
pales, pale -> true
pale,bale -> true
pale, bake -> false

5:
Palindrome Permutation: Given a string, write a function to check if it is a permutation of a palindrome.
A palindrome is a word or phrase that is the same  rwards and backwards. A permutation is a rearrangement of letters.
The palindrome does not need to be limited to just dictionary words.
EXAMPLE
Input: Tact Coa
Output: True (permutations: "taco cat", "atco eta", etc.)

6:
String Compression: Implement a method to perform basic string compression using the counts of repeated characters.
For example, the string aabcccccaaa would become a2blc5a3. If the "compressed" string would not become smaller than
the original string, your method should return the original string. You can assume the string has only uppercase and
lowercase letters (a - z).

7:
Rotate Matrix: Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to
rotate the image by 90 degrees. Can you do this in place?

8:
Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.

9:
String Rotation: Assume you have a method isSubstring which checks if one word is a substring of another.
Given two strings, sl and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring
(e.g.,"waterbottle" is a rotation of "erbottlewat").

10:
Remove Dups! Write code to remove duplicates from an unsorted linked list.
FOLLOW UP
How would you solve this problem if a temporary buffer is not allowed?

11:
Return Kth to Last: Implement an algorithm to  nd the kth to last element of a singly linked list.

12:
Delete Middle Node: Implement an algorithm to delete a node in the middle (i.e., any node but the first and last node,
not necessarily the exact middle) of a singly linked list, given only access to that node.
EXAMPLE
Input:the node c from the linked list a->b->c->d->e->f
Result: nothing is returned, but the new linked list looks like a->b->d->e->f

13:
Partition: Write code to partition a linked list around a value x, such that all nodes less than x come before all
nodes greater than or equal to x. If x is contained within the list, the values of x only need to be after the elements
less than x (see below). The partition element x can appear anywhere in the "right partition"; it does not need to
appear between the left and right partitions.
EXAMPLE
Input: 3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1[partition=5]
Output: 3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8

14:
Sum Lists: You have two numbers represented by a linked list, where each node contains a single digit.The digits are
stored in reverse order, such that the 1 's digit is at the head of the list. Write a function that adds the two numbers
and returns the sum as a linked list.
EXAMPLE
Input:(7-> 1 -> 6) + (5 -> 9 -> 2). That is, 617 + 295. Output: 2 -> 1 -> 9. That is,912.

15:
FOLLOW UP
Suppose the digits are stored in forward order. Repeat the above problem.
EXAMPLE
Input:(6 -> 1 -> 7) + (2 -> 9 -> 5). That is, 617 + 295.
Output:9 -> 1 -> 2. That is, 912.

16:
Palindrome: Implement a function to check if a linked list is a palindrome.

17:
Intersection: Given two (singly) linked lists, determine if the two lists intersect. Return the interÂ­ secting node.
Note that the intersection is de ned based on reference, not value.That is, if the kth node of the  rst linked list is
the exact same node (by reference) as the jth node of the second linked list, then they are intersecting.

18:
Loop Detection: Given a circular linked list, implement an algorithm that returns the node at the
beginning of the loop.

DEFINITION
Circular linked list: A (corrupt) linked list in which a node's next pointer points to an earlier node, so as to make
a loop in the linked list.
EXAMPLE
Input: A -> B -> C -> D -> E -> C [the same C as earlier]
Output: C

19:
Stack Min: How would you design a stack which, in addition to push and pop, has a function min which returns the minimum
element? Push, pop and min should all operate in 0(1) time.

20:
Stack of Plates: Imagine a (literal) stack of plates. If the stack gets too high, it might topple.
composed of several stacks and should create a new stack once the previous one exceeds capacity.
SetOfStacks.push() and SetOfStacks.pop() should behave identically to a single stack
(that is, pop() should return the same values as it would if there were just a single stack).
FOLLOW UP
Implement a function popAt(int index) which performs a pop operation on a specific sub-stack.

21:
Sort Stack: Write a program to sort a stack such that the smallest items are on the top. You can use an additional
temporary stack, but you may not copy the elements into any other data structure (such as an array).
The stack supports the following operations: push, pop, peek, and isEmpty.

Prob22:
Transform a Binary Search Tree in a Doubly linked list. In order.

Prob23:
